{"version":3,"sources":["assets/img/1.jpg","assets/img/2.jpg","assets/img/3.jpg","assets/img/4.jpg","assets/img/5.jpg","assets/img/6.jpg","config/urls.js","components/Menu.js","components/styles/MenuStyles.js","components/Card.js","components/styles/CardStyles.js","components/Dialog.js","components/styles/DialogStyles.js","pages/Users.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","angularAppUrl","loadStyles","makeStyles","theme","menu","marginBottom","Menu","props","classes","AppBar","position","className","Toolbar","Box","display","width","justifyContent","alignItems","mr","icon","faReact","size","Typography","variant","Tooltip","title","IconButton","color","onClick","window","location","href","faAngular","card","margin","avatar","borderRadius","flexShrink","objectFit","height","CustomCard","image","user","photo","Img1","Img2","Img3","Img4","Img5","Img6","Card","CardContent","flexDirection","src","alt","name","mt","mb","component","role","Divider","CardActions","ml","Button","dispatchDialog","textField","spacing","UserDialog","Dialog","open","onClose","closeDialog","maxWidth","DialogTitle","DialogContent","TextField","label","value","disabled","fullWidth","country","DialogActions","Users","state","users","showDialog","userDialog","this","setState","getUsers","Container","map","index","Grid","item","xs","sm","md","key","Component","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56949bef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.cfca4129.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.f0a16bc8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.ebf01c8a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.24f3c60e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.2d2b2b16.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.8d95bab3.jpg\";","export const  angularAppUrl = 'https://allanalves23.github.io/simple-list-angular/';\n\nexport default {angularAppUrl};","import React from 'react';\n\nimport { AppBar, Toolbar, makeStyles,\n        Typography, Box, IconButton, Tooltip} from '@material-ui/core';\n\nimport styles from './styles/MenuStyles';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngular, faReact } from '@fortawesome/free-brands-svg-icons';\n\nimport {angularAppUrl} from '../config/urls';\n\nconst loadStyles = makeStyles(styles);\n\nconst Menu = props => {\n    const classes = loadStyles();\n\n    const goToAngularApp = () => {\n        window.location.href = angularAppUrl;\n    }\n\n    return (\n        <AppBar position=\"static\" className={classes.menu}>\n            <Toolbar>\n                <Box display=\"flex\" width=\"100%\" justifyContent=\"space-between\" alignItems=\"center\"> \n                    <Box display=\"flex\" alignItems=\"center\">\n                        <Box mr={1}>\n                            <FontAwesomeIcon icon={faReact} size=\"2x\"/>\n                        </Box>\n                        <Typography variant=\"h6\">\n                            React APP\n                        </Typography>\n                    </Box>\n                    <Box>\n                        <Tooltip title={(<Typography>Ir para o angular APP</Typography>)}>\n                            <IconButton color=\"inherit\" onClick={goToAngularApp}>\n                                <FontAwesomeIcon icon={faAngular}/>\n                            </IconButton>\n                        </Tooltip>\n                    </Box>\n                </Box>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\n\nexport default Menu;","export default theme => ({\n    menu: {\n        marginBottom: '20px'\n    }\n})","import React from 'react';\n\nimport { Card, CardContent, Typography, CardActions, Button,\n        makeStyles, Box, Divider} from '@material-ui/core';\n\nimport styles from './styles/CardStyles';\n\nimport Img1 from '../assets/img/1.jpg';\nimport Img2 from '../assets/img/2.jpg';\nimport Img3 from '../assets/img/3.jpg';\nimport Img4 from '../assets/img/4.jpg';\nimport Img5 from '../assets/img/5.jpg';\nimport Img6 from '../assets/img/6.jpg';\n\nconst loadStyles = makeStyles(styles);\n\nconst CustomCard = props => {\n    const classes = loadStyles();\n\n    let image = '';\n\n    const user = props.user;\n\n    switch(user.photo){\n        case '1.jpg': {\n            image = Img1;\n            break;\n        }\n        case '2.jpg': {\n            image = Img2;\n            break;\n        }\n        case '3.jpg': {\n            image = Img3;\n            break;\n        }\n        case '4.jpg': {\n            image = Img4;\n            break;\n        }\n        case '5.jpg': {\n            image = Img5;\n            break;\n        }\n        default: {\n            image = Img6;\n        }\n    }\n\n    return (\n        <Card className={classes.card} variant=\"outlined\">\n            <CardContent>\n                <Box width=\"100%\" display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                    <img src={image} alt={user.name} className={classes.avatar} />\n                    <Box mt={1} mb={3} display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\n                        <Typography variant=\"h6\" component=\"h2\">\n                            {user.name}\n                        </Typography>\n                        <Typography variant=\"body2\" component=\"p\">\n                            {user.role}\n                        </Typography>\n                    </Box>\n                </Box>\n                <Divider />\n            </CardContent>\n            <CardActions>\n                <Box ml={2} mr={2} width=\"100%\" display=\"flex\" justifyContent=\"flex-end\" alignItems=\"center\">\n                    <Button size=\"small\" color=\"primary\" onClick={ () => props.dispatchDialog(user)}>Visualizar</Button>\n                </Box>\n            </CardActions>\n        </Card>\n    )\n}\n\nexport default CustomCard;","export default theme => ({\n    card: {\n        margin: '15px'\n    },\n    avatar: {\n        borderRadius: '50%',\n        flexShrink: 0,\n        objectFit: 'cover',\n        height: '150px',\n        width: '150px'\n    }\n});","import React from 'react';\nimport { Button, Dialog, DialogActions, DialogContent,\n        TextField, DialogTitle, Box, makeStyles } from '@material-ui/core';\n\nimport styles from './styles/DialogStyles';\n\nconst loadStyles = makeStyles(styles);\n\nconst UserDialog = props => {\n    const classes = loadStyles();\n\n    return (\n            <Dialog\n                open={true}\n                onClose={props.closeDialog}\n                maxWidth=\"xs\"\n            >\n                <DialogTitle>\n                    Dados do usuário\n                </DialogTitle>\n                <DialogContent>\n                    <Box mb={2}>\n                        <TextField\n                            label=\"Nome\" \n                            value={props.user.name}\n                            disabled\n                            fullWidth={true}\n                            className={classes.textField}\n                        />\n                        <TextField\n                            label=\"Profissão\" \n                            value={props.user.role}\n                            disabled\n                            fullWidth={true}\n                            className={classes.textField}\n                        />\n                        <TextField\n                            label=\"Nacionalidade\" \n                            value={props.user.country}\n                            disabled\n                            fullWidth={true}\n                            className={classes.textField}\n                        />\n                    </Box>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.closeDialog} color=\"primary\">\n                        Fechar\n                    </Button>\n                </DialogActions>\n            </Dialog>\n    );\n}\n\nexport default UserDialog;","export default theme => ({\n    textField: {\n        marginBottom: theme.spacing(1)\n    }\n})","import React, {Component} from 'react';\n\nimport { Container, Grid } from '@material-ui/core';\n\nimport Card from '../components/Card';\nimport Dialog from '../components/Dialog';\n\nimport './css/UsersStyles.css';\n\nimport users from '../assets/json/users.json';\n\n\nclass Users extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            users: [],\n            showDialog: false,\n            userDialog: {}\n        };\n    }\n\n    async getUsers(){\n        this.setState({users});\n    }\n\n    dispatchDialog(userDialog){\n        this.setState({\n            showDialog: true,\n            userDialog\n        });\n    }\n\n    closeDialog(){\n        this.setState({\n            showDialog: false\n        });\n    }\n\n    componentDidMount(){\n        this.getUsers();\n    }\n\n    render(){\n        return (\n            <Container className=\"container\">\n                { this.state.users.map( (user, index) =>\n                    (<Grid item xs={12} sm={6} md={4} key={index}>\n                        <Card user={user} dispatchDialog={(user) => this.dispatchDialog(user)}/>\n                    </Grid>)\n                )}\n                { this.state.showDialog && <Dialog user={this.state.userDialog} closeDialog={() => this.closeDialog()} />}\n            </Container>\n        ) \n    }\n}\n\nexport default Users;","import React from 'react';\nimport Menu from './components/Menu';\nimport Users from './pages/Users';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Menu />\n      <Users />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}